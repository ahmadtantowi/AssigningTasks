@model AssigningTasks.Sample.ViewModels.SimulationViewModel

@{
    Layout = "_BaseLayout";
    ViewData["Title"] = "Simulasi";
}

@section HeadSection {
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.4.0/dist/leaflet.css"
          integrity="sha512-puBpdR0798OZvTTbP4A8Ix/l+A4dHDD0DGqYW6RQ+9jxkRFclaxxQb/SJAWZfWAkuyeQUytO7+7N4QKrDh+drA=="
          crossorigin="" />
    <script src="https://unpkg.com/leaflet@1.4.0/dist/leaflet.js"
            integrity="sha512-QVftwZFqvtRNi0ZyCtsznlKSWOStnDORoefr1enyq5mVL4tmKB3S/EnC3rRJcxCPavG10IcrVGSmPh6Qw5lwrg=="
            crossorigin=""></script>
}

<h1>@ViewData["Title"]</h1>

<div id="loader"></div>
<div class="row">

    <div class="col-md-3">
        <h4><label class="control-label">Pengaturan:</label></h4>

        <label class="form-label" for="algorithmSelected">Algoritma: </label><br/>
        <select class="select" id="algorithmSelected">
            <option value="1" selected>Nearest Neighbor</option>
            <option value="2">Round Robin</option>
        </select>
        <br/>

        <div id="maxLoadSelector">
            <label class="form-label" for="maxLoadSelected">Beban maksimal: </label><br/>
            <select class="select" id="maxLoadSelected">
                <option value="1">1</option>
                <option value="2">2</option>
                <option value="3" selected>3</option>
                <option value="4">4</option>
                <option value="5">5</option>
                <option value="6">6</option>
                <option value="7">7</option>
                <option value="8">8</option>
                <option value="9">9</option>
                <option value="10">10</option>
                <option value="11">11</option>
                <option value="12">12</option>
                <option value="13">13</option>
                <option value="14">14</option>
                <option value="15">15</option>
                <option value="16">16</option>
                <option value="17">17</option>
                <option value="18">18</option>
                <option value="19">19</option>
                <option value="20">20</option>
                <option value="21">21</option>
                <option value="22">22</option>
                <option value="23">23</option>
                <option value="24">24</option>
                <option value="25">25</option>
                <option value="26">26</option>
                <option value="27">27</option>
                <option value="28">28</option>
                <option value="29">29</option>
                <option value="30">30</option>
            </select>
        </div>

        <br /><br /><img src="/images/marker-icon-2x-orange.png" style="height:30px;" /> Pengguna yang tersedia
        <br /><br /><img src="/images/marker-icon-2x-yellow.png" style="height:30px;" /> Pengguna yang meminta jasa
        <br /><br /><img src="/images/marker-icon-2x-green.png" style="height:30px;" /> Karyawan yang akan ditugaskan
        <br /><br /><img src="/images/marker-icon-2x-red.png" style="height:30px;" /> Karyawan yang ditugaskan
    </div>
    <div id="map" class="col-md-9" style="height: 400px;"></div>
</div>
<hr />

<div class="row" hidden>
    <div class="col-md-3">
        Latitude: <input class="form-control" id="inputLat" placeholder="Latitude" />
        Longitude: <input class="form-control" id="inputLng" placeholder="Longitude" />
    </div>
</div>

<div class="row">
    <div class="col-md-12">
        <label class="control-label">Karyawan terpilih:</label>
        <div id="selectedCandidate">
            @Html.Partial("_SelectedCandidate", Model.SelectedCandidate)
        </div>
    </div>
</div>
<div class="row">
    <div class="col-md-6" id="targets">
        <label class="control-label">Pengguna:</label>
        <table class="table">
            <thead>
                <tr>
                    <th hidden>@Html.DisplayNameFor(model => model.TargetTable[0].Id)</th>
                    <th>@Html.DisplayNameFor(model => model.TargetTable[0].Name)</th>
                    <th>@Html.DisplayNameFor(model => model.TargetTable[0].Latitude)</th>
                    <th>@Html.DisplayNameFor(model => model.TargetTable[0].Longitude)</th>
                    <th>Aksi</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var user in Model.TargetTable)
                {
                    <tr>
                        <td hidden>@user.Id</td>
                        <td>@user.Name</td>
                        <td>@user.Latitude</td>
                        <td>@user.Longitude</td>
                        <td>
                            <a onclick="userRequest('@user.Id')">Minta jasa</a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <div class="col-md-6">
        <label class="control-label">Karyawan yang akan ditugaskan:</label>
        <div id="candidateToAssign">
            @Html.Partial("_CandidatesToAssign", Model.CandidateTable)
        </div>
    </div>
</div>
<hr/>
<div class="row">
    <div class="col-md-12">
        <label class="control-label">Riwayat Penugasan:</label>
        <div id="transactionHistory">
            @Html.Partial("_TransactionHistory", Model.TransactionHistory)
        </div>
    </div>
</div>


@section MapSection {
<script>
    var myMap = L.map('map', {scrollWheelZoom: false})
        .setView([-6.8986037, 107.6225108], 14);
    var markerGroup = L.layerGroup()
        .addTo(myMap);

    L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png', {
            attribution: '&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors'
        })
        .addTo(myMap);

    myMap.on('moveend', function(e) {
        var coordinate = e.target.getCenter();
        updateCoordinate(coordinate);
        console.log("Moved => lat: " + coordinate.lat + ", lng: " + coordinate.lng);
    });

    myMap.on('click', function(e) {
        var coordinate = myMap.mouseEventToLatLng(e.originalEvent);
        updateCoordinate(coordinate);
        console.log("Clicked => lat: " + coordinate.lat + ", lng: " + coordinate.lng);
    });

    function loading() {
        document.getElementById("loader").style.display = "block";
    }

    function loaded() {
        document.getElementById("loader").style.display = "none";
    }

    document.getElementById('algorithmSelected').onchange = function(e) {
        maxLoadSelector.style.visibility = e.target.value == 2 ? 'visible' : 'hidden';
        @*maxLoadSelected.disabled = e.target.value == 2;*@
    }

    function updateCoordinate(coordinate) {
        document.getElementById('inputLat').value = coordinate.lat;
        document.getElementById('inputLng').value = coordinate.lng;
    }

    @*orange = users, yellow = user request, green = candidates, red = selectedCandidate*@
    function showMarker(coordinate, id, name, distance, color) {
        var marker = L.marker([coordinate.lat, coordinate.lng], {icon: getMarker(color)})
            .bindPopup(getPopup(coordinate.lat, coordinate.lng, id, name, distance))
            .addTo(markerGroup)
            @*.openPopup();*@

        function getPopup(lat, lng, id, name, distance) {
            var popup = "";
            if (id) {
                popup = popup + "Id: " + id + "<br/>";
            }
            if (name) {
                popup = popup + "Nama: " + name + "<br/>"
            }
            if (distance) {
                popup = popup + "Jarak: " + distance + "m <br/>"
            }
            return popup + "Latitude: " + lat + "<br/>Longitude: " + lng;
        }
    }

    function showMarkers(data, color = "orange") {
        if (data) {
            for (var i in data) {
                var latlng = L.latLng({ lat: data[i].Latitude , lng: data[i].Longitude });
                showMarker(latlng, data[i].Id, data[i].NamaPengguna || data[i].NamaKaryawan , data[i].Jarak, color);
            }
        }
    }

    function getMarker(color) {
        return new L.Icon({
            iconUrl: '/images/marker-icon-2x-' + color + '.png',
            shadowUrl: '/images/marker-shadow.png',
            iconSize: [25, 41],
            iconAnchor: [12, 41],
            popupAnchor: [1, -34],
            shadowSize: [41, 41]
        });
    }

    function hideMarkers() {
        markerGroup.clearLayers();
    }

    function getJson(divTable, showLog, showMarker, markerColor = "green") {
        var keys=[], arrayObj=[];
        $("#" + divTable + " table thead tr th").each(function() {
            keys.push($(this).html().replace(" ", ""));
        });

        $("#" + divTable + " table tbody tr").each(function() {
            var obj={}, i=0;
            $(this).children("td").each(function(){
                obj[keys[i]]=$(this).html();
                i++;
            })
            arrayObj.push(obj);
        });

        if (showMarker) {
            showMarkers(arrayObj, markerColor);
        }
        if (showLog) {
            console.log(divTable + " JSON:");
            console.log(arrayObj);
        }

        return arrayObj;
    }

    function addLatLngToJson(json, index, lat, lng) {
        json[index].Latitude = lat;
        json[index].Longitude = lng;
        return json;
    }

    function userRequest(id) {
        loading();
        $.ajax({
            type: "GET",
            url: "@Url.Action("RequestCandidate")",
            data: {
                id: id,
                algo: document.getElementById('algorithmSelected').value,
                maxLoad: document.getElementById('maxLoadSelected').value,
            },
            success: function(data) {
                $('#candidateToAssign').html(data);
                @*document.getElementById('selectedCandidate').style.visibility = 'visible';*@
                console.log("RequestCandidate - Sukses bos!")

                hideMarkers();
                var targetRequest = getJson("targets", true).find(item => item.Id === id)
                showMarkers([ targetRequest ], "yellow"); @*Target request show marker yellow*@

                $.ajax({
                    type: "GET",
                    url: "@Url.Action("SelectedCandidate")",
                    success: function(data) {
                        $('#selectedCandidate').html(data);
                        document.getElementById('selectedCandidate').style.visibility = 'visible';
                        console.log("SelectedCandidate - Sukses bos!");

                        var candidateSelected = getJson("selectedCandidate");
                        var candidateToAssign = getJson("candidateToAssign");
                        var selected = candidateToAssign.find(item => item.Id === candidateSelected[0].IdKaryawan);
                        var toAssign = candidateToAssign.filter(item => item.Id != candidateSelected[0].IdKaryawan);
                        showMarkers([ selected ], "red"); @*Candidate selected show marker red*@
                        showMarkers(toAssign, "green"); @*Candidate to assign show marker green*@
                        myMap.flyTo(new L.LatLng(selected.Latitude, selected.Longitude));

                        $.ajax({
                            type: "GET",
                            url: "@Url.Action("TransactionHistory")",
                            success: function(data) {
                                $('#transactionHistory').html(data);
                                console.log("TransactionHistory - Sukses bos!")
                            },
                            error: function(exc) {
                                console.log("TransactionHistory - Error bos!");
                                console.log(exc);
                            }
                        });
                    },
                    error: function(exc) {
                        console.log("SelectedCandidate - Error bos!");
                        console.log(exc);
                    }
                });
            },
            error: function(exc) {
                console.log("RequestCandidate - Error bos! " + exc)
            },
            complete: function() {
                loaded();
                console.log("RequestCandidate - Beres bos!")
            }
        });
    }

    $(document).ready(function() {
        updateCoordinate(myMap.getCenter());
        maxLoadSelector.style.visibility = document.getElementById('algorithmSelected').value == 2 ? 'visible' : 'hidden';
        document.getElementById('selectedCandidate').style.visibility = 'hidden';
        loaded();

        var json = getJson("targets", true, true, "orange");
    })
</script>
}

